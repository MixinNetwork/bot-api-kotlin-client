/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package gobind/gobind */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 8 "go_kernelmain.go"

#include <stdlib.h>
#include <stdint.h>
#include "seq.h"
#include "kernel.h"


#line 1 "cgo-generated-wrapper"

#line 8 "go_main.go"

#include <stdlib.h>
#include <stdint.h>
#include "seq.h"
#include "universe.h"


#line 1 "cgo-generated-wrapper"

#line 11 "seq.go"




 #include <stdlib.h>
 #include "seq.h"

#line 1 "cgo-generated-wrapper"

#line 15 "seq_support.go"


#include <jni.h>
#include <stdint.h>
#include <stdlib.h>
#include "seq_support.h"

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) nbyteslice proxykernel_Address_PublicSpendKey(int32_t refnum);
extern __declspec(dllexport) nbyteslice proxykernel_Address_PublicViewkey(int32_t refnum);
extern __declspec(dllexport) void proxykernel_Address_SetPublicSpendKey(int32_t refnum, nbyteslice param_k);
extern __declspec(dllexport) void proxykernel_Address_SetPublicViewKey(int32_t refnum, nbyteslice param_k);
extern __declspec(dllexport) nstring proxykernel_Address_String(int32_t refnum);
extern __declspec(dllexport) int32_t new_kernel_Address();
extern __declspec(dllexport) void proxykernel_Tx_Hash_Set(int32_t refnum, nstring v);
extern __declspec(dllexport) nstring proxykernel_Tx_Hash_Get(int32_t refnum);
extern __declspec(dllexport) void proxykernel_Tx_Raw_Set(int32_t refnum, nstring v);
extern __declspec(dllexport) nstring proxykernel_Tx_Raw_Get(int32_t refnum);
extern __declspec(dllexport) void proxykernel_Tx_Change_Set(int32_t refnum, int32_t v);
extern __declspec(dllexport) int32_t proxykernel_Tx_Change_Get(int32_t refnum);
extern __declspec(dllexport) int32_t new_kernel_Tx();
extern __declspec(dllexport) void proxykernel_Utxo_Hash_Set(int32_t refnum, nstring v);
extern __declspec(dllexport) nstring proxykernel_Utxo_Hash_Get(int32_t refnum);
extern __declspec(dllexport) void proxykernel_Utxo_Index_Set(int32_t refnum, nint v);
extern __declspec(dllexport) nint proxykernel_Utxo_Index_Get(int32_t refnum);
extern __declspec(dllexport) void proxykernel_Utxo_Amount_Set(int32_t refnum, nstring v);
extern __declspec(dllexport) nstring proxykernel_Utxo_Amount_Get(int32_t refnum);
extern __declspec(dllexport) int32_t new_kernel_Utxo();

/* Return type for proxykernel__BuildTx */
struct proxykernel__BuildTx_return {
	nstring r0;
	int32_t r1;
};
extern __declspec(dllexport) struct proxykernel__BuildTx_return proxykernel__BuildTx(nstring param_asset, nstring param_amount, int32_t param_threshold, nstring param_receiverKeys, nstring param_receiverMask, nbyteslice param_inputs, nstring param_changeKeys, nstring param_changeMask, nstring param_extra, nstring param_reference);

/* Return type for proxykernel__BuildTxToKernelAddress */
struct proxykernel__BuildTxToKernelAddress_return {
	nstring r0;
	int32_t r1;
};
extern __declspec(dllexport) struct proxykernel__BuildTxToKernelAddress_return proxykernel__BuildTxToKernelAddress(nstring param_asset, nstring param_amount, nstring param_kenelAddress, nbyteslice param_inputs, nstring param_changeKeys, nstring param_changeMask, nstring param_extra);

/* Return type for proxykernel__BuildWithdrawalTx */
struct proxykernel__BuildWithdrawalTx_return {
	int32_t r0;
	int32_t r1;
};
extern __declspec(dllexport) struct proxykernel__BuildWithdrawalTx_return proxykernel__BuildWithdrawalTx(nstring param_asset, nstring param_amount, nstring param_address, nstring param_tag, nstring param_feeAmount, nstring param_feeKeys, nstring param_feeMask, nbyteslice param_inputs, nstring param_changeKeys, nstring param_changeMask, nstring param_extra);

/* Return type for proxykernel__DecodeRawTx */
struct proxykernel__DecodeRawTx_return {
	nstring r0;
	int32_t r1;
};
extern __declspec(dllexport) struct proxykernel__DecodeRawTx_return proxykernel__DecodeRawTx(nstring param_raw, nint param_p1);

/* Return type for proxykernel__NewMainAddressFromString */
struct proxykernel__NewMainAddressFromString_return {
	int32_t r0;
	int32_t r1;
};
extern __declspec(dllexport) struct proxykernel__NewMainAddressFromString_return proxykernel__NewMainAddressFromString(nstring param_s);

/* Return type for proxykernel__SignTx */
struct proxykernel__SignTx_return {
	int32_t r0;
	int32_t r1;
};

// skipped function SignTransaction with unsupported parameter or result types
//
extern __declspec(dllexport) struct proxykernel__SignTx_return proxykernel__SignTx(nstring param_raw, nstring param_inputKeys, nstring param_viewKeys, nstring param_spendKey, char param_withoutFee);
extern __declspec(dllexport) nstring proxy_error_Error(int32_t refnum);

// IncGoRef is called by foreign code to pin a Go object while its refnum is crossing
// the language barrier
extern __declspec(dllexport) void IncGoRef(int32_t refnum);

// DestroyRef is called by Java to inform Go it is done with a reference.
extern __declspec(dllexport) void DestroyRef(int32_t refnum);

#ifdef __cplusplus
}
#endif
